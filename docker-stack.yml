version: "3.3"

services:

    #######       ADMINISTRATION       #######
 
    portainer:
        image: portainer/portainer
        ports:
            - 9000:9000
        command: -H unix:///var/run/docker.sock
        deploy:
            mode: replicated
            replicas: 1
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - ./services/portainer/data:/data 
            - '/etc/localtime:/etc/localtime:ro'



    #######       REVERSE PROXY       #######

    traefik:
        image: traefik:alpine
        command: -c /etc/traefik.toml
        deploy:
            mode: replicated
            replicas: 1
        ports:
            - "8080:8080"
            - "80:80"
            - target: 443
              published: 443 
              mode: host
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - ./services/traefik/traefik-stack.toml:/etc/traefik.toml
            - ./services/traefik/data/traefik.log:/etc/traefik.log
            - ./services/traefik/data/traefik-access.log:/etc/traefik-access.log
            - ./services/traefik/self.crt:/etc/self.crt
            - ./services/traefik/self.key:/etc/self.key
            - '/etc/localtime:/etc/localtime:ro'
        networks:
            - frontend-nw
            - backend-nw

    test:
        image: containous/whoami:latest
        networks:
            - frontend-nw
        deploy:
            mode: replicated
            replicas: 0
            labels:
                traefik.frontend.rule: "PathPrefixStrip:/test"
                traefik.port: "80"
                traefik.enable: "true"
                traefik.backend: "test"
                traefik.docker.network: "angaryos_frontend-nw"



    #######       FRONTEND       #######
    
    frontend: 
        image: karapazar/angular-serve-light:0.75
        volumes:
            - ./frontend/dist/light/:/usr/share/nginx/html
            - '/etc/localtime:/etc/localtime:ro'
        networks:
            - frontend-nw
        deploy:
            mode: replicated
            replicas: 1
            labels:
                traefik.frontend.rule: "PathPrefix:/"
                traefik.port: "80"
                traefik.enable: "true"
                traefik.backend: "frontend"
                traefik.docker.network: "angaryos_frontend-nw"
    
    frontendBuilder: 
        image: karapazar/angular-serve:0.75
        volumes:
            - ./frontend:/usr/src/app 
            - '/etc/localtime:/etc/localtime:ro'
        networks:
            - frontend-nw
        deploy:
            mode: replicated
            replicas: 0
            labels:
                traefik.frontend.rule: "PathPrefix:/"
                traefik.port: "4200"
                traefik.enable: "true"
                traefik.backend: "frontend"
                traefik.docker.network: "angaryos_frontend-nw"
                
    varnishFrontend:
        image: million12/varnish
        command: bash -c "/start.sh && sleep 15 && echo 'basladi'"
        environment:
            - CACHE_SIZE=128m
        deploy:
            mode: replicated
            replicas: 0
            labels:
                traefik.varnishFrontendAssets.frontend.rule: "PathPrefix:/assets"
                traefik.varnishFrontendMain.frontend.rule: "PathPrefix:/main-es"
                traefik.varnishFrontendDefault.frontend.rule: "PathPrefix:/default.js"
                traefik.varnishFrontendScripts.frontend.rule: "PathPrefix:/scripts."                
                traefik.port: "80"
                traefik.enable: "true"
                traefik.backend: "varnish"
                traefik.docker.network: "angaryos_frontend-nw"
        volumes:
            - ./services/varnish/frontend.vcl:/etc/varnish/default.vcl
        networks:
            - frontend-nw



    #######       BACKEND       #######
 
    laravel:
        image: karapazar/laravel-php-fpm:0.75
        volumes:
            - ./backend:/var/www 
            - ./backend/php.ini:/usr/local/etc/php/conf.d/local.ini
            - ./services/geoserver/data:/var/geoserver
            - /var/run/docker.sock:/var/run/docker.sock 
            - '/etc/localtime:/etc/localtime:ro'
        environment:
            SERVICE_NAME: app
            SERVICE_TAGS: dev
        deploy:
            mode: replicated
            replicas: 1
        networks:
            - backend-nw
            - db-nw
            - mq-nw

    laravelcron:
        image: karapazar/laravel-cron:0.75
        volumes:
            - ./backend:/var/www 
            - ./backend/php.ini:/usr/local/etc/php/conf.d/local.ini
            - ./services/geoserver/data:/var/geoserver
            - /var/run/docker.sock:/var/run/docker.sock 
            - '/etc/localtime:/etc/localtime:ro'
        environment:
            SERVICE_NAME: app
            SERVICE_TAGS: dev
        deploy:
            mode: replicated
            replicas: 1
        networks:
            - backend-nw
            - db-nw
            - mq-nw
            
    laraveljobs:
        image: karapazar/laravel-jobs:0.75
        volumes:
            - ./backend:/var/www 
            - ./backend/php.ini:/usr/local/etc/php/conf.d/local.ini
            - ./services/geoserver/data:/var/geoserver
            - /var/run/docker.sock:/var/run/docker.sock 
            - '/etc/localtime:/etc/localtime:ro'
        environment:
            SERVICE_NAME: app
            SERVICE_TAGS: dev
        deploy:
            mode: replicated
            replicas: 1
        networks:
            - backend-nw
            - db-nw
            - mq-nw

    nginx:
        image: nginx:alpine
        tty: true
        volumes:
            - ./backend:/var/www 
            - ./backend/nginx.conf:/etc/nginx/conf.d/app.conf
            - '/etc/localtime:/etc/localtime:ro'
        deploy:
            mode: replicated
            replicas: 1
            labels:
                traefik.api.frontend.rule: "PathPrefix:/api"
                traefik.logs.frontend.rule: "PathPrefix:/logs"
                traefik.port: "80"
                traefik.enable: "true"
                traefik.backend: "nginx"
                traefik.docker.network: "angaryos_backend-nw"
        networks:
            - backend-nw

    memcached:
        image: memcached
        networks:
            - backend-nw
            
            
            
    #######       MOBIL       #######

    mobil: 
        image: karapazar/ionic-serve:0.75
        volumes:
            - ./mobil:/usr/src/app 
            - '/etc/localtime:/etc/localtime:ro'
        networks:
            - mobil-nw
        ports:
            - "9004:8100"
        deploy:
            mode: replicated
            replicas: 0
            
            
            
    #######       FILES       #######
    
    fileServer: 
        image: nginx
        volumes:
            - ./backend/public/angaryos:/usr/share/nginx/html:ro
            - '/etc/localtime:/etc/localtime:ro'
        networks:
            - frontend-nw
        deploy:
            mode: replicated
            replicas: 1
            labels:
                traefik.frontend.rule: "PathPrefix:/uploads"
                traefik.port: "80"
                traefik.enable: "true"
                traefik.backend: "fileServer"
                traefik.docker.network: "angaryos_backend-nw"
    
    ftpServer:
        image: fauria/vsftpd
        environment:
            - FTP_USER=angaryos
            - FTP_PASS=1234Aa.
            - FILE_OPEN_MODE=0777
            - PASV_ADDR_RESOLVE=YES
            - PASV_ADDRESS=ftpServer
            - PASV_ADDRESS_ENABLE=YES
            #- PASV_ENABLE=YES
            - PASV_MIN_PORT=64000
            - PASV_MAX_PORT=64005
            #- port_enable=YES
            
        volumes:
            - ./backend/public:/home/vsftpd
            - '/etc/localtime:/etc/localtime:ro'
        ports:
            - "9005:21"
            #- "64000-64005:64000-64005"
        networks:
            - backend-nw
        deploy:
            mode: replicated
            replicas: 1
    
    
    
    #######       DB       #######
    
    postgresql:
        hostname: 'postgresql'
        image: crunchydata/crunchy-postgres-gis:centos7-12.2-4.3.0
        environment:
            - PGHOST=/tmp
            - MAX_CONNECTIONS=500
            - SHARED_BUFFERS=512MB
            - MAX_WAL_SENDERS=15
            - PG_MODE=primary
            - PG_PRIMARY_USER=primaryuser
            - PG_PRIMARY_PASSWORD=1234Aa.
            - PG_DATABASE=postgres
            - PG_USER=postgres
            - PG_PASSWORD=1234Aa.
            - PG_ROOT_PASSWORD=1234Aa.
            - PG_PRIMARY_PORT=5432
        volumes:
            - ./services/postgresql/data:/pgdata
            - ./services/postgresql/.pgpass:/var/lib/pgsql/.pgpass
            - '/etc/localtime:/etc/localtime:ro'
        #ports:
        #    - "5532:5432"
        networks:
            - db-nw



    #######       QUEUE FOR LOG       #######  

    rabbitmq:
        hostname: 'rabbitmq'
        image: rabbitmq:3-management
        ports:
            - "9001:15672"
        deploy:
            mode: replicated
            replicas: 0
        volumes:
            - '/etc/localtime:/etc/localtime:ro'
        networks:
            - mq-nw
        environment:
            - RABBITMQ_ERLANG_COOKIE=1234
            - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
            - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
            - RABBITMQ_DEFAULT_VHOST=${RABBITMQ_DEFAULT_VHOST}



    #######       LOG       #######  

    elasticsearch:
        hostname: 'elasticsearch'
        image: docker.elastic.co/elasticsearch/elasticsearch-oss:6.5.4
        environment:
            ES_JAVA_OPTS: "-Xms108m -Xmx108m"
        networks:
            - elk-nw
        deploy:
            mode: replicated
            replicas: 0            
        volumes:
            - ./services/logs/elasticsearch/data:/usr/share/elasticsearch/data
            - ./services/logs/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
            - '/etc/localtime:/etc/localtime:ro'

    logstash:
        hostname: 'logstash'
        image: docker.elastic.co/logstash/logstash-oss:6.5.4
        volumes:
            - ./services/logs/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
            - ./services/logs/logstash/pipeline/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
            - '/etc/localtime:/etc/localtime:ro'
        environment:
            LS_JAVA_OPTS: "-Xmx256m -Xms256m"
        networks:
            - elk-nw
            - mq-nw
        depends_on:
            - elasticsearch
        deploy:
            mode: replicated
            replicas: 0

    kibana:
        hostname: 'kibana'
        image: docker.elastic.co/kibana/kibana-oss:6.5.4
        ports:
            - "9002:5601"
        volumes:
            - ./services/logs/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml
            - '/etc/localtime:/etc/localtime:ro'
        networks:
            - elk-nw
        deploy:
            mode: replicated
            replicas: 0



    #######       GEOSERVER CLUSTER       #######

    geoserver:
        image: thinkwhere/geoserver:2.14
        logging:
            driver: "json-file"
            options:
                max-size: "10m"
                max-file: "10"
        networks:
            - db-nw
            - backend-nw
        ports:
            - "9003:8080"
        deploy:
            mode: replicated
            replicas: 1
            #labels:
                #traefik.frontend.rule: "PathPrefix:/geoserver"
                #traefik.port: "8080"
                #traefik.enable: "true"
                #traefik.backend: "geoserver"
                #traefik.docker.network: "angaryos_backend-nw"
        environment:
            - GEOSERVER_LOG_LOCATION=/opt/geoserver/data_dir/logs/geoserver.log
        volumes:
            - ./services/geoserver/data:/opt/geoserver/data_dir
            - ./services/geoserver/tomcat_settings/setenv.sh:/usr/local/tomcat/bin/setenv.sh
            - ./services/geoserver/tomcat_settings/logs:/usr/local/tomcat/logs
            - ./services/geoserver/rasters:/root/Rasters
            - ./services/geoserver/font/Ubuntu-R.ttf:/usr/share/fonts/truetype/Ubuntu-R.ttf
            - '/etc/localtime:/etc/localtime:ro'
    
    

networks:
    frontend-nw:
    backend-nw:
    mobil-nw:
    db-nw:
    elk-nw:
    mq-nw: